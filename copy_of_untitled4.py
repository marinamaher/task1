# -*- coding: utf-8 -*-
"""Copy of Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11cTCG-qH5YBeWUJ-6Qt3SGDoox1IEC2Z
"""

# The Sparks Foundation GRIP Tasks
# My Name Is Marina Maher Labib
# Data Science & Business Analytics Track
# Task 1


from google.colab import files
data=files.upload()

# first step upload the data
import io
import pandas as pd
data_set=pd.read_excel(io.BytesIO(data['Book1.xlsx']))
print(data_set)

# 2nd step visualize the data 
import numpy as mp
import pandas as pd
import matplotlib.pyplot as plt
plt.scatter( data_set.hours, data_set.scores , color='red' )
plt.title(' the relation between the student study hours and his score ')
plt.xlabel=(' the student study hours' )
plt.ylabel=(' the score of the student study hours')
plt.show()

# split the data into training and test
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
 
# get the location of the data set
X = data_set.iloc[:, :-1]
y = data_set.iloc[:, -1]
 
# split the dataset
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.05, random_state=0)
# test train split visualization 
plt.scatter(X_train , y_train , label = ' training data' , color ='red' , alpha=0.7)
plt.scatter(X_test , y_test , label = ' training data' , color ='blue' , alpha=0.7)
plt.legend()
plt.title(' train test split ')
plt.show()

# import the liear regression model
from sklearn.linear_model import LinearRegression
R=LinearRegression()
R.fit(X_train.values.reshape(-1, 1) , y_train.values)
# use the model to predict
prediction=R.predict(X_test.values.reshape(-1,1))
# plot prediction line against actual test data
plt.plot(X_test , prediction , label = ' linear regression ' , color = 'green')
plt.scatter(X_test , y_test , label = ' actual test data' , color = 'blue')
plt.legend()
plt.show()

# predict the percentaga of a student with number of student hour
import numpy as np
R.predict(np.array([[9.25]]))[0]

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, prediction))